{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:18.990913Z\",\"iopub.execute_input\":\"2023-02-13T14:04:18.991314Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.009094Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:18.991279Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.006937Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.011441Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.012352Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.069922Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.012306Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.068794Z\"}}\ncars=pd.read_csv('/kaggle/input/indian-cars-dataset/cars_ds_final_2021.csv')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.071728Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.072998Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.080364Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.072954Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.079242Z\"}}\ncars.rename(columns = {'Ex-Showroom_Price' : 'Price'}, inplace = True)\ncars.rename(columns={'ABS_(Anti-lock_Braking_System)':'Abs'},inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.082002Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.082437Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.105316Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.082401Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.102185Z\"}}\ncars['Price'] = cars['Price'].str.replace(',', '')\ncars['Price'] = cars['Price'].str.replace('Rs. ', '')\ncars['Price'] = cars['Price'].astype(int)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.108705Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.109944Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.128703Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.109885Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.126656Z\"}}\ncars['Displacement'] = cars['Displacement'].str.replace(' cc', '')\ncars.Displacement = cars.Displacement.fillna(0)\ncars['Displacement'] = cars['Displacement'].astype(int)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.130624Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.131184Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.370230Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.131109Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.368900Z\"}}\nx=cars['Price']\ny=cars['Displacement']\nplt.scatter(x, y, c =\"blue\")\n \n# To show the plot\nplt.show()\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.374606Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.374989Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.385413Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.374958Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.384110Z\"}}\n\nlist(cars.columns)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.387289Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.387757Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.402727Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.387705Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.401309Z\"}}\ncars['Car'] = cars['Make']+\" \"+cars['Model']+\" \"+cars['Variant']\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.404170Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.404602Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.450500Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.404555Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.448927Z\"}}\ncarsfilterd=cars[['Car','Cylinders','Turbocharger','Cruise_Control','Door_Ajar_Warning','Power','Torque','Seat_Height_Adjustment','Displacement']]\nname=carsfilterd['Power'].str.extract(r\"(\\d+)\")\ncarsfilterd['Power']=name[0]\nname=carsfilterd['Torque'].str.extract(r\"(\\d+)\")\ncarsfilterd['Torque']=name[0]\ncarsfilterd['Seat_Height_Adjustment']=carsfilterd['Seat_Height_Adjustment'].replace(\"Electric Adjustment with Memory\",\"10\")\ncarsfilterd['Seat_Height_Adjustment']=carsfilterd['Seat_Height_Adjustment'].fillna(\"0\")\ncarsfilterd['Seat_Height_Adjustment']=carsfilterd['Seat_Height_Adjustment'].replace(\"Electric Adjustment\",\"8\")\ncarsfilterd['Seat_Height_Adjustment']=carsfilterd['Seat_Height_Adjustment'].replace(\"Semi Automatic Adjustment\",\"6\")\ncarsfilterd['Seat_Height_Adjustment']=carsfilterd['Seat_Height_Adjustment'].replace(\"Manual Adjustment\",\"4\")\ncarsfilterd\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.452298Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.452781Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.482088Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.452738Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.480729Z\"}}\ncarsfilterd.dropna(subset=['Torque'])\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.483510Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.483894Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.494375Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.483860Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.492851Z\"}}\ncarsfilterd=carsfilterd.dropna(subset=['Torque','Power'])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.499412Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.499956Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.513303Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.499917Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.511820Z\"}}\ncarsfilterd['Power']=carsfilterd['Power'].astype('int')\ncarsfilterd['Torque']=carsfilterd['Torque'].astype('int')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.515787Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.516871Z\",\"iopub.status.idle\":\"2023-02-13T14:04:19.540855Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.516816Z\",\"shell.execute_reply\":\"2023-02-13T14:04:19.539300Z\"}}\ncarsfilterd\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:19.542458Z\",\"iopub.execute_input\":\"2023-02-13T14:04:19.542834Z\",\"iopub.status.idle\":\"2023-02-13T14:04:20.488715Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:19.542802Z\",\"shell.execute_reply\":\"2023-02-13T14:04:20.487314Z\"}}\ndef normalize(n,c):\n    min=carsfilterd[c].min()\n    max=carsfilterd[c].max()\n    std=carsfilterd[c].std()\n    return (n - min) / (max - min) * 10\nfor n in ['Power','Torque','Displacement']:\n carsfilterd[n]=carsfilterd[n].apply(lambda x : normalize(x,n))\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:20.490508Z\",\"iopub.execute_input\":\"2023-02-13T14:04:20.491007Z\",\"iopub.status.idle\":\"2023-02-13T14:04:20.509731Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:20.490962Z\",\"shell.execute_reply\":\"2023-02-13T14:04:20.508746Z\"}}\ndef category(c): \n    carsfilterd[c]=carsfilterd[c].str.replace(\"yes\",\"10\")\n    carsfilterd[c]=carsfilterd[c].str.replace(\"Yes\",\"10\")\n    carsfilterd[c]=carsfilterd[c].fillna(\"0\")\nfor i in ['Turbocharger','Cruise_Control','Door_Ajar_Warning']:\n    category(i)\n\n# %% [raw]\n# \n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:20.510817Z\",\"iopub.execute_input\":\"2023-02-13T14:04:20.512196Z\",\"iopub.status.idle\":\"2023-02-13T14:04:20.525425Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:20.512158Z\",\"shell.execute_reply\":\"2023-02-13T14:04:20.524055Z\"}}\ncarsfilterd['Cylinders']=carsfilterd['Cylinders'].fillna(carsfilterd['Cylinders'].mean())\ncarsfilterd['Cylinders']=(carsfilterd['Cylinders']/2).astype(int)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:20.527631Z\",\"iopub.execute_input\":\"2023-02-13T14:04:20.528693Z\",\"iopub.status.idle\":\"2023-02-13T14:04:20.543559Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:20.528635Z\",\"shell.execute_reply\":\"2023-02-13T14:04:20.542052Z\"}}\ncarsfilterd['Rating']=carsfilterd.sum(axis=1)\ncarsfilterd['Rating'].max()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:20.545794Z\",\"iopub.execute_input\":\"2023-02-13T14:04:20.546287Z\",\"iopub.status.idle\":\"2023-02-13T14:04:20.555606Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:20.546247Z\",\"shell.execute_reply\":\"2023-02-13T14:04:20.554085Z\"}}\ncarsfilterd['Price']=cars['Price']\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:20.557781Z\",\"iopub.execute_input\":\"2023-02-13T14:04:20.558653Z\",\"iopub.status.idle\":\"2023-02-13T14:04:20.591625Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:20.558603Z\",\"shell.execute_reply\":\"2023-02-13T14:04:20.589742Z\"}}\ncarsfilterd\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:20.593411Z\",\"iopub.execute_input\":\"2023-02-13T14:04:20.594004Z\",\"iopub.status.idle\":\"2023-02-13T14:04:34.762860Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:20.593960Z\",\"shell.execute_reply\":\"2023-02-13T14:04:34.761807Z\"}}\nprint(\"Enter the your price range\")\nprint(\"Enter min price\")\nmin=int(input())\nprint(\"Enter max price\")\nmax=int(input())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:34.764284Z\",\"iopub.execute_input\":\"2023-02-13T14:04:34.764696Z\",\"iopub.status.idle\":\"2023-02-13T14:04:34.775158Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:34.764650Z\",\"shell.execute_reply\":\"2023-02-13T14:04:34.773415Z\"}}\na=int(carsfilterd['Price'].max())\nb=int(carsfilterd['Price'].min())\nif(max>a or min<b):\n    print(\"out of range\")\nelse:\n    temp=carsfilterd[(carsfilterd['Price'] >= min) & (carsfilterd['Price'] <= max)]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-02-13T14:04:34.776862Z\",\"iopub.execute_input\":\"2023-02-13T14:04:34.777674Z\",\"iopub.status.idle\":\"2023-02-13T14:04:34.804797Z\",\"shell.execute_reply.started\":\"2023-02-13T14:04:34.777621Z\",\"shell.execute_reply\":\"2023-02-13T14:04:34.803393Z\"}}\nmodel=temp[temp.Rating==temp.Rating.max()]\nmodel","metadata":{"_uuid":"2a06d45c-26f7-43f4-8ee7-094d66820ae2","_cell_guid":"dacc0c08-fe7b-4f14-b348-ec9a250f8f0d","collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2023-03-12T05:56:21.611813Z","iopub.execute_input":"2023-03-12T05:56:21.612267Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"/kaggle/input/indian-cars-dataset/cars_ds_final.csv\n/kaggle/input/indian-cars-dataset/cars_ds_final_2021.csv\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:29: FutureWarning: The default value of regex will change from True to False in a future version.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:56: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:58: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:59: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:60: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:61: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:62: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:63: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:107: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n","output_type":"stream"},{"name":"stdout","text":"Enter the your price range\nEnter min price\n","output_type":"stream"}]}]}